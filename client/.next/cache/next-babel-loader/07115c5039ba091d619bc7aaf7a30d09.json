{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nlet globalState = {};\nlet listeners = [];\nlet actions = {};\nexport const useStore = (shouldListen = true) => {\n  const setState = useState(globalState)[1]; // Type Of actions[actionIdentifier] is = undefined\n\n  const dispatch = (actionIdentifier, payload) => {\n    console.log(\"Type Of actions[actionIdentifier] is = \" + typeof actions[actionIdentifier]);\n\n    if (actions[actionIdentifier]) {\n      const newState = actions[actionIdentifier](globalState, payload);\n      globalState = _objectSpread(_objectSpread({}, globalState), newState);\n\n      for (const listener of listeners) {\n        listener(globalState);\n      }\n    } else {\n      console.log(\"========== \\n ============= \");\n      console.log(\"Type Of actions[actionIdentifier] is = \" + typeof actions[actionIdentifier]);\n      console.log(\"AGAIN\");\n    }\n  };\n\n  useEffect(() => {\n    if (shouldListen) {\n      listeners.push(setState);\n    }\n\n    return () => {\n      if (shouldListen) {\n        listeners = listeners.filter(li => li !== setState);\n      }\n    };\n  }, [setState, shouldListen]);\n  return [globalState, dispatch];\n};\nexport const initStore = (initialState, userActions) => {\n  if (initialState) {\n    globalState = _objectSpread(_objectSpread({}, globalState), initialState);\n  }\n\n  actions = _objectSpread(_objectSpread({}, actions), userActions);\n};","map":{"version":3,"sources":["C:/Users/Kh3m/Documents/projects/austinExpress/client/hooks/store/store.js"],"names":["useState","useEffect","globalState","listeners","actions","useStore","shouldListen","setState","dispatch","actionIdentifier","payload","console","log","newState","listener","push","filter","li","initStore","initialState","userActions"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAEC,YAAY,GAAG,IAAjB,KAA2B;AAC/C,QAAMC,QAAQ,GAAGP,QAAQ,CAACE,WAAD,CAAR,CAAsB,CAAtB,CAAjB,CAD+C,CAG/C;;AACA,QAAMM,QAAQ,GAAG,CAACC,gBAAD,EAAmBC,OAAnB,KAA+B;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4C,OAAOR,OAAO,CAACK,gBAAD,CAAtE;;AACA,QAAGL,OAAO,CAACK,gBAAD,CAAV,EAA8B;AAC1B,YAAMI,QAAQ,GAAGT,OAAO,CAACK,gBAAD,CAAP,CAA0BP,WAA1B,EAAuCQ,OAAvC,CAAjB;AACAR,MAAAA,WAAW,mCAAQA,WAAR,GAAwBW,QAAxB,CAAX;;AAEA,WAAI,MAAMC,QAAV,IAAsBX,SAAtB,EAAiC;AAC7BW,QAAAA,QAAQ,CAACZ,WAAD,CAAR;AACH;AACJ,KAPD,MAOO;AACHS,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4C,OAAOR,OAAO,CAACK,gBAAD,CAAtE;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GAdD;;AAgBAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,YAAH,EAAiB;AACbH,MAAAA,SAAS,CAACY,IAAV,CAAeR,QAAf;AACH;;AACD,WAAO,MAAM;AACT,UAAGD,YAAH,EAAiB;AACbH,QAAAA,SAAS,GAAGA,SAAS,CAACa,MAAV,CAAiBC,EAAE,IAAIA,EAAE,KAAKV,QAA9B,CAAZ;AACH;AACJ,KAJD;AAKH,GATQ,EASN,CAACA,QAAD,EAAWD,YAAX,CATM,CAAT;AAWA,SAAO,CAACJ,WAAD,EAAcM,QAAd,CAAP;AACH,CAhCM;AAkCP,OAAO,MAAMU,SAAS,GAAG,CAACC,YAAD,EAAeC,WAAf,KAA+B;AACpD,MAAGD,YAAH,EAAiB;AACbjB,IAAAA,WAAW,mCAAQA,WAAR,GAAwBiB,YAAxB,CAAX;AACH;;AACDf,EAAAA,OAAO,mCAAQA,OAAR,GAAoBgB,WAApB,CAAP;AACH,CALM","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nlet globalState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = ( shouldListen = true ) => {\r\n    const setState = useState(globalState)[1];\r\n    \r\n    // Type Of actions[actionIdentifier] is = undefined\r\n    const dispatch = (actionIdentifier, payload) => {\r\n        console.log(\"Type Of actions[actionIdentifier] is = \" + typeof actions[actionIdentifier]);\r\n        if(actions[actionIdentifier]) {\r\n            const newState = actions[actionIdentifier](globalState, payload);\r\n            globalState = { ...globalState, ...newState };\r\n    \r\n            for(const listener of listeners) {\r\n                listener(globalState);\r\n            }\r\n        } else {\r\n            console.log(\"========== \\n ============= \");\r\n            console.log(\"Type Of actions[actionIdentifier] is = \" + typeof actions[actionIdentifier]);\r\n            console.log(\"AGAIN\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(shouldListen) {\r\n            listeners.push(setState);\r\n        }\r\n        return () => {\r\n            if(shouldListen) {\r\n                listeners = listeners.filter(li => li !== setState);\r\n            }\r\n        }\r\n    }, [setState, shouldListen]);\r\n\r\n    return [globalState, dispatch];\r\n}\r\n\r\nexport const initStore = (initialState, userActions) => {\r\n    if(initialState) {\r\n        globalState = { ...globalState, ...initialState };\r\n    }\r\n    actions = { ...actions, ...userActions };\r\n}"]},"metadata":{},"sourceType":"module"}