{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from \"node-fetch\";\nvar BASE_URL = \"http://localhost:2020\";\nexport var GRAPHQLURL = \"\".concat(BASE_URL, \"/graphql\");\nexport var request = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(graphqlQuery) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(GRAPHQLURL, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(graphqlQuery)\n            });\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function request(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetcher = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, query) {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(key, {\n              method: \"POST\",\n              body: JSON.stringify(query),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 2:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res.json());\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetcher(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/Kh3m/Documents/projects/austinExpress/client/lib/http/request.js"],"names":["fetch","BASE_URL","GRAPHQLURL","request","graphqlQuery","method","headers","body","JSON","stringify","response","json","fetcher","key","query","res"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,IAAMC,QAAQ,GAAC,uBAAf;AACA,OAAO,IAAMC,UAAU,aAAMD,QAAN,aAAhB;AAEP,OAAO,IAAME,OAAO;AAAA,sEAAG,iBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIJ,KAAK,CAACE,UAAD,EAC5B;AACIG,cAAAA,MAAM,EAAE,MADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFb;AAKIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBL,YAAhB;AALV,aAD4B,CADT;;AAAA;AACbM,YAAAA,QADa;AAAA,6CASZA,QAAQ,CAACC,IAAT,EATY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPR,OAAO;AAAA;AAAA;AAAA,GAAb;AAaP,OAAO,IAAMS,OAAO;AAAA,uEAAG,kBAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDd,KAAK,CAACa,GAAD,EAAM;AACzBR,cAAAA,MAAM,EAAE,MADiB;AAEzBE,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,KAAf,CAFmB;AAGzBR,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX;AAHgB,aAAN,CADJ;;AAAA;AACbS,YAAAA,GADa;AAAA,8CASZA,GAAG,CAACJ,IAAJ,EATY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPC,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import fetch from \"node-fetch\";\r\n\r\nconst BASE_URL=\"http://localhost:2020\";\r\nexport const GRAPHQLURL = `${BASE_URL}/graphql`;\r\n\r\nexport const request = async (graphqlQuery) => {\r\n    const response = await fetch(GRAPHQLURL, \r\n    {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify( graphqlQuery )\r\n    })\r\n    return response.json();\r\n}\r\n\r\n\r\nexport const fetcher = async (key, query) => {\r\n    const res = await fetch(key, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(query),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    return res.json();\r\n}"]},"metadata":{},"sourceType":"module"}