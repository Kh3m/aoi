{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport * as actionTypes from \"./actionTypes\";\nimport { request } from \"../../../lib/http/request\";\nimport Router from \"next/router\";\nimport { useStore } from \"../store\";\n\nvar expirationTimeInSecs = function expirationTimeInSecs() {\n  var expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n  return (expirationDate.getTime() - new Date().getTime()) / 1000;\n  ;\n};\n\nvar useAuthActions = function useAuthActions() {\n  _s();\n\n  var dispatch = useStore()[1]; // auth start activate spinner\n\n  var authStart = function authStart() {\n    dispatch(actionTypes.AUTH_START);\n  }; // auth logout clear authentication datas\n\n\n  var authLogout = function authLogout() {\n    localStorage.removeItem(\"localId\");\n    localStorage.removeItem(\"tokenId\");\n    localStorage.removeItem(\"expirationDate\");\n    dispatch(actionTypes.AUTH_LOGOUT);\n  }; // auth error - triggers when there is error with login\n\n\n  var authError = function authError(errors) {\n    dispatch(actionTypes.AUTH_ERROR, errors);\n  }; // auth response helper\n\n\n  var authResponseSync = function authResponseSync(data) {\n    dispatch(actionTypes.AUTH_RESPONSE, data);\n  }; // helper function fr auth response\n\n\n  var authRes = function authRes(user) {\n    var expirationDate = new Date(new Date().getTime() + user.expiresIn * 1000); // store user's Id and token for authomatic login upon referesh\n\n    localStorage.setItem(\"localId\", user.localId);\n    localStorage.setItem(\"tokenId\", user.tokenId);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    authResponseSync(user);\n  }; // auth logout after expiration time\n\n\n  var authLogoutAfterExpirationTime = function authLogoutAfterExpirationTime(expirationTime) {\n    // convert to milliseconds\n    var expirationTimeMili = expirationTime * 1000;\n    setTimeout(function () {\n      dispatch(authLogout());\n    }, expirationTimeMili);\n  };\n\n  var authLoginAuto = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var token, expirationDate, graphqlQuery, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              authStart();\n              token = localStorage.getItem(\"tokenId\");\n\n              if (token) {\n                _context.next = 7;\n                break;\n              }\n\n              authLogout();\n              Router.replace(\"/\");\n              _context.next = 26;\n              break;\n\n            case 7:\n              expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n              if (!(expirationDate <= new Date())) {\n                _context.next = 13;\n                break;\n              }\n\n              authLogout();\n              Router.replace(\"/\");\n              _context.next = 26;\n              break;\n\n            case 13:\n              authLogoutAfterExpirationTime(expirationTimeInSecs());\n              graphqlQuery = {\n                query: \"\\n                        query getUser($localId: ID!){\\n                            getUser(localId:$localId)\\n                            {\\n                                localId\\n                                email\\n                                fullName\\n                            }\\n                        },\\n                    \",\n                variables: {\n                  localId: localStorage.getItem(\"localId\")\n                }\n              };\n              _context.prev = 15;\n              _context.next = 18;\n              return request(graphqlQuery);\n\n            case 18:\n              res = _context.sent;\n\n              if (res.errors) {\n                authError(res.errors.map(function (e) {\n                  return e.message;\n                }));\n              }\n\n              if (res.data) {\n                authResponseSync(res.data.getUser);\n              }\n\n              _context.next = 26;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](15);\n              authError(_context.t0);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 23]]);\n    }));\n\n    return function authLoginAuto() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // auth response - get the user's data\n\n\n  var authResponse = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(authData, isLogin) {\n      var graphqlQuery, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // start loading\n              authStart();\n              graphqlQuery = {\n                query: \"\\n                mutation LoginUser($email: String!, $password: String!){\\n                    loginUser(email:$email, password:$password)\\n                    {\\n                        localId\\n                        email\\n                        tokenId\\n                        expiresIn\\n                        fullName\\n                    }\\n                },\\n            \",\n                variables: {\n                  email: authData.email,\n                  password: authData.password\n                }\n              };\n\n              if (!isLogin) {\n                graphqlQuery = {\n                  query: \"\\n                    mutation CreateUser(\\n                        $email: String!, \\n                        $fullName: String!, \\n                        $password: String!) {\\n                        createUser(userInput: {email:$email, fullName:$fullName, password:$password })\\n                        {\\n                            localId\\n                            email\\n                            tokenId\\n                            expiresIn\\n                            fullName\\n                        }\\n                    }\\n                \",\n                  variables: {\n                    email: authData.email,\n                    fullName: authData.fullName,\n                    password: authData.password\n                  }\n                };\n              }\n\n              _context2.prev = 3;\n              _context2.next = 6;\n              return request(graphqlQuery);\n\n            case 6:\n              res = _context2.sent;\n\n              if (res.errors) {\n                authError(res.errors.map(function (e) {\n                  return e.message;\n                }));\n              }\n\n              if (res.data) {\n                if (isLogin) {\n                  authRes(res.data.loginUser);\n                } else {\n                  authRes(res.data.createUser);\n                }\n\n                Router.replace(\"/\");\n              }\n\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](3);\n              authError(_context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 11]]);\n    }));\n\n    return function authResponse(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return {\n    authStart: authStart,\n    authLogout: authLogout,\n    authResponse: authResponse,\n    authLoginAuto: authLoginAuto\n  };\n};\n\n_s(useAuthActions, \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n  return [useStore];\n});\n\nexport default useAuthActions;","map":{"version":3,"sources":["C:/Users/Kh3m/Documents/projects/austinExpress/client/hooks/store/actions/auth.js"],"names":["actionTypes","request","Router","useStore","expirationTimeInSecs","expirationDate","Date","localStorage","getItem","getTime","useAuthActions","dispatch","authStart","AUTH_START","authLogout","removeItem","AUTH_LOGOUT","authError","errors","AUTH_ERROR","authResponseSync","data","AUTH_RESPONSE","authRes","user","expiresIn","setItem","localId","tokenId","authLogoutAfterExpirationTime","expirationTime","expirationTimeMili","setTimeout","authLoginAuto","token","replace","graphqlQuery","query","variables","res","map","e","message","getUser","authResponse","authData","isLogin","email","password","fullName","loginUser","createUser"],"mappings":"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","sourcesContent":["\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport { request } from \"../../../lib/http/request\";\r\nimport Router from \"next/router\";\r\nimport { useStore } from \"../store\";\r\n\r\nconst expirationTimeInSecs = () => {\r\n    const expirationDate = new Date(localStorage.getItem(\"expirationDate\"))\r\n    return (expirationDate.getTime() - new Date().getTime()) / 1000;;  \r\n}\r\n\r\nconst useAuthActions = () => {\r\n    const dispatch = useStore()[1];\r\n\r\n    // auth start activate spinner\r\n    const authStart = () => {\r\n        dispatch(actionTypes.AUTH_START);\r\n    }\r\n\r\n    // auth logout clear authentication datas\r\n    const authLogout = () => {\r\n        localStorage.removeItem(\"localId\")\r\n        localStorage.removeItem(\"tokenId\")        \r\n        localStorage.removeItem(\"expirationDate\"); \r\n        dispatch(actionTypes.AUTH_LOGOUT);\r\n    }\r\n\r\n    // auth error - triggers when there is error with login\r\n    const authError = (errors) => {\r\n        dispatch(actionTypes.AUTH_ERROR, errors);\r\n    }\r\n\r\n    // auth response helper\r\n    const authResponseSync = (data) => {\r\n        dispatch(actionTypes.AUTH_RESPONSE, data);\r\n    }\r\n\r\n    // helper function fr auth response\r\n    const authRes = ( user ) => {\r\n        const expirationDate = new Date(new Date().getTime() + user.expiresIn * 1000);\r\n        // store user's Id and token for authomatic login upon referesh\r\n        localStorage.setItem(\"localId\", user.localId)\r\n        localStorage.setItem(\"tokenId\", user.tokenId)        \r\n        localStorage.setItem(\"expirationDate\", expirationDate); \r\n        authResponseSync(user);    \r\n    }\r\n\r\n    // auth logout after expiration time\r\n    const authLogoutAfterExpirationTime = (expirationTime) => {\r\n        // convert to milliseconds\r\n        const expirationTimeMili = expirationTime * 1000\r\n        setTimeout(() => {\r\n            dispatch(authLogout())\r\n        }, expirationTimeMili);\r\n    }\r\n\r\n    const authLoginAuto = async () => {\r\n        authStart();\r\n        const token = localStorage.getItem(\"tokenId\");\r\n        if(!token) {\r\n            authLogout();\r\n            Router.replace(\"/\")\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n            if(expirationDate <= new Date()) {\r\n                authLogout();\r\n                Router.replace(\"/\")\r\n            } else {\r\n                authLogoutAfterExpirationTime(expirationTimeInSecs());\r\n                let graphqlQuery = {\r\n                    query: `\r\n                        query getUser($localId: ID!){\r\n                            getUser(localId:$localId)\r\n                            {\r\n                                localId\r\n                                email\r\n                                fullName\r\n                            }\r\n                        },\r\n                    `,\r\n                    variables: { localId: localStorage.getItem(\"localId\") }\r\n                }\r\n\r\n                try {\r\n                    const res = await request(graphqlQuery);\r\n                    if(res.errors) {\r\n                        authError(res.errors.map(e => e.message));\r\n                    }\r\n                    if(res.data) {\r\n                        authResponseSync( res.data.getUser ); \r\n                    }\r\n                } catch(err) {\r\n                    authError(err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // auth response - get the user's data\r\n    const authResponse = async (authData, isLogin) => {\r\n        // start loading\r\n        authStart();\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation LoginUser($email: String!, $password: String!){\r\n                    loginUser(email:$email, password:$password)\r\n                    {\r\n                        localId\r\n                        email\r\n                        tokenId\r\n                        expiresIn\r\n                        fullName\r\n                    }\r\n                },\r\n            `,\r\n            variables: { email: authData.email, password: authData.password }\r\n        } \r\n        if(!isLogin) {\r\n            graphqlQuery = {\r\n                query: `\r\n                    mutation CreateUser(\r\n                        $email: String!, \r\n                        $fullName: String!, \r\n                        $password: String!) {\r\n                        createUser(userInput: {email:$email, fullName:$fullName, password:$password })\r\n                        {\r\n                            localId\r\n                            email\r\n                            tokenId\r\n                            expiresIn\r\n                            fullName\r\n                        }\r\n                    }\r\n                `,\r\n                variables: { \r\n                    email: authData.email, \r\n                    fullName: authData.fullName, \r\n                    password: authData.password\r\n                }\r\n            }    \r\n        }  \r\n        try {\r\n            const res = await request(graphqlQuery);\r\n            if(res.errors) {\r\n                authError(res.errors.map(e => e.message));\r\n            }\r\n            if(res.data) {\r\n                if(isLogin) {\r\n                    authRes( res.data.loginUser );\r\n                } else {\r\n                    authRes( res.data.createUser );\r\n                }\r\n                Router.replace(\"/\");\r\n            }\r\n        } catch(err) {\r\n            authError(err);\r\n        }\r\n    }\r\n\r\n    return {\r\n        authStart,\r\n        authLogout,\r\n        authResponse,\r\n        authLoginAuto\r\n    }\r\n}\r\nexport default useAuthActions;"]},"metadata":{},"sourceType":"module"}