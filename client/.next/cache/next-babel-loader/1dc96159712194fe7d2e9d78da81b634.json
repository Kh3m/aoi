{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport { request } from \"../../../lib/http/request\";\nimport Router from \"next/router\";\nimport { useStore } from \"../store\";\n\nconst expirationTimeInSecs = () => {\n  const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n  return (expirationDate.getTime() - new Date().getTime()) / 1000;\n  ;\n};\n\nconst useAuthActions = () => {\n  const dispatch = useStore()[1]; // auth start activate spinner\n\n  const authStart = () => {\n    dispatch(actionTypes.AUTH_START);\n  }; // auth logout clear authentication datas\n\n\n  const authLogout = () => {\n    localStorage.removeItem(\"localId\");\n    localStorage.removeItem(\"tokenId\");\n    localStorage.removeItem(\"expirationDate\");\n    dispatch(actionTypes.AUTH_LOGOUT);\n  }; // auth error - triggers when there is error with login\n\n\n  const authError = errors => {\n    dispatch(actionTypes.AUTH_ERROR, errors);\n  }; // auth response helper\n\n\n  const authResponseSync = data => {\n    dispatch(actionTypes.AUTH_RESPONSE, data);\n  }; // helper function fr auth response\n\n\n  const authRes = user => {\n    const expirationDate = new Date(new Date().getTime() + user.expiresIn * 1000); // store user's Id and token for authomatic login upon referesh\n\n    localStorage.setItem(\"localId\", user.localId);\n    localStorage.setItem(\"tokenId\", user.tokenId);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    authResponseSync(user);\n  }; // auth logout after expiration time\n\n\n  const authLogoutAfterExpirationTime = expirationTime => {\n    // convert to milliseconds\n    const expirationTimeMili = expirationTime * 1000;\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, expirationTimeMili);\n  };\n\n  const authLoginAuto = async () => {\n    authStart();\n    const token = localStorage.getItem(\"tokenId\");\n\n    if (!token) {\n      authLogout();\n      Router.replace(\"/\");\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate <= new Date()) {\n        authLogout();\n        Router.replace(\"/\");\n      } else {\n        authLogoutAfterExpirationTime(expirationTimeInSecs());\n        let graphqlQuery = {\n          query: `\n                        query getUser($localId: ID!){\n                            getUser(localId:$localId)\n                            {\n                                localId\n                                email\n                                fullName\n                            }\n                        },\n                    `,\n          variables: {\n            localId: localStorage.getItem(\"localId\")\n          }\n        };\n\n        try {\n          const res = await request(graphqlQuery);\n\n          if (res.errors) {\n            authError(res.errors.map(e => e.message));\n          }\n\n          if (res.data) {\n            authResponseSync(res.data.getUser);\n          }\n        } catch (err) {\n          authError(err);\n        }\n      }\n    }\n  }; // auth response - get the user's data\n\n\n  const authResponse = async (authData, isLogin) => {\n    // start loading\n    authStart();\n    let graphqlQuery = {\n      query: `\n                mutation LoginUser($email: String!, $password: String!){\n                    loginUser(email:$email, password:$password)\n                    {\n                        localId\n                        email\n                        tokenId\n                        expiresIn\n                        fullName\n                    }\n                },\n            `,\n      variables: {\n        email: authData.email,\n        password: authData.password\n      }\n    };\n\n    if (!isLogin) {\n      graphqlQuery = {\n        query: `\n                    mutation CreateUser(\n                        $email: String!, \n                        $fullName: String!, \n                        $password: String!) {\n                        createUser(userInput: {email:$email, fullName:$fullName, password:$password })\n                        {\n                            localId\n                            email\n                            tokenId\n                            expiresIn\n                            fullName\n                        }\n                    }\n                `,\n        variables: {\n          email: authData.email,\n          fullName: authData.fullname,\n          password: authData.password\n        }\n      };\n    }\n\n    try {\n      const res = await request(graphqlQuery);\n\n      if (res.errors) {\n        authError(res.errors.map(e => e.message));\n      }\n\n      if (res.data) {\n        if (isLogin) {\n          authRes(res.data.loginUser);\n        } else {\n          authRes(res.data.createUser);\n        }\n\n        Router.push(\"/\");\n      }\n    } catch (err) {\n      authError(err);\n    }\n  };\n\n  return {\n    authStart,\n    authLogout,\n    authResponse,\n    authLoginAuto\n  };\n};\n\nexport default useAuthActions;","map":{"version":3,"sources":["C:/Users/Kh3m/Documents/projects/austinExpress/client/hooks/store/actions/auth.js"],"names":["actionTypes","request","Router","useStore","expirationTimeInSecs","expirationDate","Date","localStorage","getItem","getTime","useAuthActions","dispatch","authStart","AUTH_START","authLogout","removeItem","AUTH_LOGOUT","authError","errors","AUTH_ERROR","authResponseSync","data","AUTH_RESPONSE","authRes","user","expiresIn","setItem","localId","tokenId","authLogoutAfterExpirationTime","expirationTime","expirationTimeMili","setTimeout","authLoginAuto","token","replace","graphqlQuery","query","variables","res","map","e","message","getUser","err","authResponse","authData","isLogin","email","password","fullName","fullname","loginUser","createUser","push"],"mappings":"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","sourcesContent":["\r\nimport * as actionTypes from \"./actionTypes\";\r\nimport { request } from \"../../../lib/http/request\";\r\nimport Router from \"next/router\";\r\nimport { useStore } from \"../store\";\r\n\r\nconst expirationTimeInSecs = () => {\r\n    const expirationDate = new Date(localStorage.getItem(\"expirationDate\"))\r\n    return (expirationDate.getTime() - new Date().getTime()) / 1000;;  \r\n}\r\n\r\nconst useAuthActions = () => {\r\n    const dispatch = useStore()[1];\r\n\r\n    // auth start activate spinner\r\n    const authStart = () => {\r\n        dispatch(actionTypes.AUTH_START);\r\n    }\r\n\r\n    // auth logout clear authentication datas\r\n    const authLogout = () => {\r\n        localStorage.removeItem(\"localId\")\r\n        localStorage.removeItem(\"tokenId\")        \r\n        localStorage.removeItem(\"expirationDate\"); \r\n        dispatch(actionTypes.AUTH_LOGOUT);\r\n    }\r\n\r\n    // auth error - triggers when there is error with login\r\n    const authError = (errors) => {\r\n        dispatch(actionTypes.AUTH_ERROR, errors);\r\n    }\r\n\r\n    // auth response helper\r\n    const authResponseSync = (data) => {\r\n        dispatch(actionTypes.AUTH_RESPONSE, data);\r\n    }\r\n\r\n    // helper function fr auth response\r\n    const authRes = ( user ) => {\r\n        const expirationDate = new Date(new Date().getTime() + user.expiresIn * 1000);\r\n        // store user's Id and token for authomatic login upon referesh\r\n        localStorage.setItem(\"localId\", user.localId)\r\n        localStorage.setItem(\"tokenId\", user.tokenId)        \r\n        localStorage.setItem(\"expirationDate\", expirationDate); \r\n        authResponseSync(user);    \r\n    }\r\n\r\n    // auth logout after expiration time\r\n    const authLogoutAfterExpirationTime = (expirationTime) => {\r\n        // convert to milliseconds\r\n        const expirationTimeMili = expirationTime * 1000\r\n        setTimeout(() => {\r\n            dispatch(authLogout())\r\n        }, expirationTimeMili);\r\n    }\r\n\r\n    const authLoginAuto = async () => {\r\n        authStart();\r\n        const token = localStorage.getItem(\"tokenId\");\r\n        if(!token) {\r\n            authLogout();\r\n            Router.replace(\"/\")\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\r\n            if(expirationDate <= new Date()) {\r\n                authLogout();\r\n                Router.replace(\"/\")\r\n            } else {\r\n                authLogoutAfterExpirationTime(expirationTimeInSecs());\r\n                let graphqlQuery = {\r\n                    query: `\r\n                        query getUser($localId: ID!){\r\n                            getUser(localId:$localId)\r\n                            {\r\n                                localId\r\n                                email\r\n                                fullName\r\n                            }\r\n                        },\r\n                    `,\r\n                    variables: { localId: localStorage.getItem(\"localId\") }\r\n                }\r\n\r\n                try {\r\n                    const res = await request(graphqlQuery);\r\n                    if(res.errors) {\r\n                        authError(res.errors.map(e => e.message));\r\n                    }\r\n                    if(res.data) {\r\n                        authResponseSync( res.data.getUser ); \r\n                    }\r\n                } catch(err) {\r\n                    authError(err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // auth response - get the user's data\r\n    const authResponse = async (authData, isLogin) => {\r\n        // start loading\r\n        authStart();\r\n        let graphqlQuery = {\r\n            query: `\r\n                mutation LoginUser($email: String!, $password: String!){\r\n                    loginUser(email:$email, password:$password)\r\n                    {\r\n                        localId\r\n                        email\r\n                        tokenId\r\n                        expiresIn\r\n                        fullName\r\n                    }\r\n                },\r\n            `,\r\n            variables: { email: authData.email, password: authData.password }\r\n        } \r\n        if(!isLogin) {\r\n            graphqlQuery = {\r\n                query: `\r\n                    mutation CreateUser(\r\n                        $email: String!, \r\n                        $fullName: String!, \r\n                        $password: String!) {\r\n                        createUser(userInput: {email:$email, fullName:$fullName, password:$password })\r\n                        {\r\n                            localId\r\n                            email\r\n                            tokenId\r\n                            expiresIn\r\n                            fullName\r\n                        }\r\n                    }\r\n                `,\r\n                variables: { \r\n                    email: authData.email, \r\n                    fullName: authData.fullname, \r\n                    password: authData.password\r\n                }\r\n            }    \r\n        }  \r\n        try {\r\n            const res = await request(graphqlQuery);\r\n            if(res.errors) {\r\n                authError(res.errors.map(e => e.message));\r\n            }\r\n            if(res.data) {\r\n                if(isLogin) {\r\n                    authRes( res.data.loginUser );\r\n                } else {\r\n                    authRes( res.data.createUser );\r\n                }\r\n                Router.push(\"/\");\r\n            }\r\n        } catch(err) {\r\n            authError(err);\r\n        }\r\n    }\r\n\r\n    return {\r\n        authStart,\r\n        authLogout,\r\n        authResponse,\r\n        authLoginAuto\r\n    }\r\n}\r\nexport default useAuthActions;"]},"metadata":{},"sourceType":"module"}